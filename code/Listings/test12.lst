C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TEST12
OBJECT MODULE PLACED IN .\Objects\test12.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE test12.c OMF2 ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listin
                    -gs\test12.lst) TABS(2) OBJECT(.\Objects\test12.obj)

line level    source

   1          #include <89c51rd2.H>
   2          #include<stdio.h>
   3          #include<math.h>
   4          
   5          //Variables
   6          #define dt   P1 //data line LCD
   7          #define buzzer P2_1
   8          #define RS   P2_7 // mode comand/data LCD
   9          #define RW   P2_6 // mode read/write LCD
  10          #define EN   P2_5 // sync
  11          #define startButton    P0_0 // reset
  12          #define firstPlayerButton P0_1
  13          #define plusModeButton P0_2
  14          #define playPauseButton P0_3 // start/stop
  15          #define minusModeButton P0_4
  16          #define secondPlayerButton P0_5
  17          
  18          typedef enum Button {
  19              Start,
  20              FirstPlayer,
  21              PlusMode,
  22              PlayPause,
  23              MinusMode,
  24              SecondPlayer
  25          };
  26          
  27          typedef struct {
  28              long time;     
  29              long increment;
  30          } TimeMode;
  31          
  32          idata TimeMode chess_time_modes[] = {
  33                  {900,  10},   // 15 minutes = 900 seconds, 10 seconds increment
  34                  {1800, 5},    // 30 minutes = 1800 seconds, 5 seconds increment
  35                  {3600, 0},    // 60 minutes = 3600 seconds, 0 seconds increment
  36                  {5400, 30},   // 90 minutes = 5400 seconds, 30 seconds increment
  37                  {7200, 10},   // 120 minutes = 7200 seconds, 10 seconds increment
  38                  {300,  3},    // 5 minutes = 300 seconds, 3 seconds increment
  39                  {600,  2},    // 10 minutes = 600 seconds, 2 seconds increment
  40                  {2400, 5},    // 40 minutes = 2400 seconds, 5 seconds increment
  41                  {180,  2},    // 3 minutes = 180 seconds, 2 seconds increment
  42                  {2700, 1}     // 45 minutes = 2700 seconds, 1 second increment
  43          };
  44          
  45          enum Button currentButton;
  46          int gameMode;
  47          int ms;
  48          int sec;
  49          int min;
  50          int needUpdateDisplay; // flag for display update
  51          
  52          long player1Time;
  53          long player2Time;
  54          int currentPlayer = 1; // 1 for Player 1, 2 for Player 2
C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 2   

  55          int isPaused = -1; // -1 means not started, 0 for running, 1 for paused
  56          
  57          // Delay function for LCD
  58          void delay(long int time) {
  59   1          long int i;
  60   1          for (i = 1; i <= time; i++) { ; }
  61   1      }
  62          
  63          // Activates buzzer for 1 second
  64          void activateBuzzer() {
  65   1          buzzer = 1;
  66   1          delay(10000);
  67   1          buzzer = 0;
  68   1      }
  69          
  70          // Sends command to LCD
  71          void sendComand(int Comand) {
  72   1          RS = 0;
  73   1          RW = 0;
  74   1          EN = 1;
  75   1          dt = Comand;
  76   1          EN = 0;
  77   1          delay(2);
  78   1      }
  79          
  80          // Sends a string to LCD
  81          void sendData(char s_data[], long int speed) {
  82   1          int i = 0;
  83   1          while (s_data[i] != 0) {
  84   2              RS = 1;
  85   2              RW = 0;
  86   2              EN = 1;
  87   2              dt = s_data[i];
  88   2              EN = 0;
  89   2              i++;
  90   2              delay(speed);
  91   2          }
  92   1      }
  93          
  94          // Displays game over message and activates buzzer
  95          void displayGameOver(int loser) {
  96   1          sendComand(1); // Clear LCD
  97   1          sendComand(127); // Move cursor to center
  98   1          sendData(" Game Over", 1);
  99   1          sendComand(192); // Move to second line
 100   1          if (loser == 1) {
 101   2              sendData("Player 1 lost   ", 1);
 102   2          } else if (loser == 2) {
 103   2              sendData("Player 2 lost   ", 1);
 104   2          }
 105   1          activateBuzzer();
 106   1      }
 107          
 108          // Timer interrupt for countdown
 109          void timeInterrupt(void) interrupt 5 using 2 {
 110   1          TF2 = 0; // Clear interrupt flag
 111   1          TH2 = 0xD8; // Reload for 10 ms
 112   1          TL2 = 0xEF;
 113   1      
 114   1          if (!isPaused) {
 115   2              needUpdateDisplay = 1; // Flag for updating display
 116   2      
C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 3   

 117   2              if (currentPlayer == 1) {
 118   3                  if (player1Time > 0) {
 119   4                      player1Time -= 10;
 120   4                  } else {
 121   4                      isPaused = 1; // Pause the game
 122   4                      displayGameOver(1); // Player 1 lost
 123   4                  }
 124   3              } else if (currentPlayer == 2) {
 125   3                  if (player2Time > 0) {
 126   4                      player2Time -= 10;
 127   4                  } else {
 128   4                      isPaused = 1; // Pause the game
 129   4                      displayGameOver(2); // Player 2 lost
 130   4                  }
 131   3              }
 132   2          }
 133   1      }
 134          
 135          // Sends an integer as characters to LCD
 136          void sendInteger(int integer, long int speed) {
 137   1          RS = 1;
 138   1          RW = 0;
 139   1          EN = 1;
 140   1          dt = integer;
 141   1          EN = 0;
 142   1          delay(speed);
 143   1      }
 144          
 145          // Prints a number to LCD
 146          void printNumber(int number) {
 147   1          if (number >= 0) {
 148   2              int divisor = 1;
 149   2              while (number / divisor >= 10) {
 150   3                  divisor *= 10;
 151   3              }
 152   2              while (divisor > 0) {
 153   3                  int digit = number / divisor;
 154   3                  sendInteger(digit + 48, 1);
 155   3                  number %= divisor;
 156   3                  divisor /= 10;
 157   3              }
 158   2          }
 159   1      }
 160          
 161          // Initializes LCD
 162          void lcd(void) {
 163   1          int initCommands[] = {12, 56, 6}, t;
 164   1          for (t = 0; t < 2; t++) sendComand(initCommands[t]);
 165   1      }
 166          
 167          // Displays the start message on LCD
 168          void displayStartMessage(void) {
 169   1          sendComand(2);
 170   1          sendData(" Chess clock", 1);
 171   1      }
 172          
 173          // Displays time in HH:MM:SS format
 174          void displayTime(long time) {
 175   1          long seconds = (time) % 60;
 176   1          long minutes = (time / 60) % 60;
 177   1          long hours = time / (60 * 60);
 178   1      
C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 4   

 179   1          if (hours > 0) {
 180   2              sendData(" ", 1);
 181   2              printNumber(hours);
 182   2              sendData(":", 1);
 183   2              if (minutes < 10) {
 184   3                  sendData("0", 1);
 185   3              }
 186   2              printNumber(minutes);
 187   2          } else {
 188   2              if (minutes > 20) {
 189   3                  sendData("00", 1);
 190   3                  sendData(":", 1);
 191   3                  printNumber(minutes);
 192   3              } else {
 193   3                  if (minutes < 10) {
 194   4                      sendData("0", 1);
 195   4                  }
 196   3                  printNumber(minutes);
 197   3                  sendData(":", 1);
 198   3                  if (seconds < 10) {
 199   4                      sendData("0", 1);
 200   4                  }
 201   3                  printNumber(seconds);
 202   3              }
 203   2          }
 204   1      }
 205          
 206          // Updates the LCD display with player times
 207          void displayLCD(void) {
 208   1          sendComand(128); // Top line
 209   1          displayTime(player1Time / 1000);
 210   1          sendData("  --  ", 1);
 211   1          displayTime(player2Time / 1000);
 212   1      }
 213          
 214          void printStartTime(int currentGameMode) {
 215   1        sendComand(1);
 216   1        sendComand(128); // Move to top line
 217   1        displayTime((chess_time_modes[currentGameMode].time + chess_time_modes[currentGameMode].increment));
 218   1        sendData("  ", 1);
 219   1        sendData("--", 1);
 220   1        sendData("  ", 1);
 221   1        displayTime((chess_time_modes[currentGameMode].time + chess_time_modes[currentGameMode].increment));
 222   1        sendComand(192); // Move to bottom line
 223   1        sendData("Set mode: ", 1);
 224   1        printNumber(currentGameMode);
 225   1      }
 226          
 227          // Handles button press to start the game
 228          void startClick() {
 229   1          while (startButton) {
 230   2              min = 0;
 231   2              sec = 0;
 232   2              ms = 0;
 233   2              TR2 = 0;
 234   2              gameMode = 0;
 235   2              currentButton = Start;
 236   2              printStartTime(gameMode);
 237   2              while (startButton) {}
 238   2          }
 239   1      }
 240          
C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 5   

 241          // Cycles to the next time mode
 242          void plusMode() {
 243   1          while (plusModeButton) {
 244   2              if (gameMode == ((int) (sizeof(chess_time_modes) / sizeof(chess_time_modes[0])) - 1)) {
 245   3                  gameMode = 0;
 246   3              } else {
 247   3                  gameMode++;
 248   3              }
 249   2              printStartTime(gameMode);
 250   2              while (plusModeButton) {}
 251   2          }
 252   1      }
 253          
 254          // Cycles to the previous time mode
 255          void minusMode() {
 256   1          while (minusModeButton) {
 257   2              if (gameMode == 0) {
 258   3                  gameMode = ((int) (sizeof(chess_time_modes) / sizeof(chess_time_modes[0])) - 1);
 259   3              } else {
 260   3                  gameMode--;
 261   3              }
 262   2              printStartTime(gameMode);
 263   2              while (minusModeButton) {}
 264   2          }
 265   1      }
 266          
 267          // Toggles between play and pause
 268          void togglePause() {
 269   1          if (playPauseButton) {
 270   2              if (isPaused == -1) {
 271   3                  long timeAll = (chess_time_modes[gameMode].time + chess_time_modes[gameMode].increment) * 1000
             -;
 272   3                  player1Time = timeAll;
 273   3                  player2Time = timeAll;
 274   3                  isPaused = 0;
 275   3                  TR2 = 1;
 276   3                  sendComand(192);
 277   3                  sendData("Set player: ", 1);
 278   3                  printNumber(currentPlayer);
 279   3              } else {
 280   3                  isPaused = !isPaused;
 281   3              }
 282   2              while (playPauseButton) {}
 283   2          }
 284   1      }
 285          
 286          // Switches the current player
 287          void switchPlayer() {
 288   1          while (firstPlayerButton) {
 289   2              currentPlayer = 2;
 290   2              sendComand(192);
 291   2              sendData("Set player: ", 1);
 292   2              printNumber(currentPlayer);
 293   2              if (!isPaused) {
 294   3                  player1Time += chess_time_modes[gameMode].increment * 1000;
 295   3              }
 296   2              while (firstPlayerButton) {}
 297   2          }
 298   1          while (secondPlayerButton && currentPlayer == 2) {
 299   2              currentPlayer = 1;
 300   2              sendComand(192);
 301   2              sendData("Set player: ", 1);
C51 COMPILER V9.60.7.0   TEST12                                                            12/21/2024 16:56:53 PAGE 6   

 302   2              printNumber(currentPlayer);
 303   2              if (!isPaused) {
 304   3                  player2Time += chess_time_modes[gameMode].increment * 1000;
 305   3              }
 306   2              while (secondPlayerButton) {}
 307   2          }
 308   1      }
 309          
 310          void main(void) {
 311   1          lcd();
 312   1          sendComand(1);
 313   1          T2CON = 0x00; 
 314   1          T2MOD = 0x00;
 315   1          ET2 = 1;
 316   1          TR2 = 0;
 317   1          EA = 1;
 318   1          buzzer = 0;
 319   1      
 320   1          player1Time = 0;
 321   1          player2Time = 0;
 322   1          currentPlayer = 1;
 323   1          displayStartMessage();
 324   1          while (1) {
 325   2              switchPlayer();
 326   2              togglePause();
 327   2              while (needUpdateDisplay) {
 328   3                  displayLCD();
 329   3                  needUpdateDisplay = 0;
 330   3              }
 331   2              startClick();
 332   2              plusMode();
 333   2              minusMode();
 334   2          }
 335   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1648    ----
   CONSTANT SIZE    =    110    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      61
   IDATA SIZE       =     80    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
